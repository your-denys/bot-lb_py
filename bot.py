import asyncio
import logging
import aiohttp
import hashlib
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import (
    Message, Contact, CallbackQuery,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.filters import Command

# ---------- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env ----------
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_data = {}
quiz_questions = [
    ("–ö–∞–∫–æ–π —Å—É–º–º—ã –≤ –º–µ—Å—è—Ü –í–∞–º –±—ã–ª–æ –±—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π?", ["1000 $", "5 000 $", "10 000 $", "–ë–æ–ª—å—à–µ 10 000 $"]),
    ("–° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –í—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ–∫?", ["–í—ã–ø–ª–∞—á—É –∫—Ä–µ–¥–∏—Ç/–∏–ø–æ—Ç–µ–∫—É", "–ü–æ–º–æ–≥—É —Ä–æ–¥–Ω—ã–º", "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é", "–ö—É–ø–ª—é –∞–≤—Ç–æ/–∫–≤–∞—Ä—Ç–∏—Ä—É"]),
    ("–ê–∫—Ü–∏–∏ –∫–∞–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", ["–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö", "–£–∑–±–µ–∫—Å–∫–∏—Ö", "–°–º–µ—à–∞–Ω–Ω—ã—Ö"]),
    ("–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ GPT-invest?", ["–ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ–∫–ª–∞–º–∞", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–Ω–∞–∫–æ–º—ã—Ö"])
]

# ---------- –°–õ–ê–ô–î–´ ----------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    photo = FSInputFile("img2.jpg")
    text = (
        "–ù–∏–∫–æ–ª–∞–π –∏ –ü–∞–≤–µ–ª –î—É—Ä–æ–≤—ã —Å–æ–∑–¥–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É Telegram, –∫–æ—Ç–æ—Ä–∞—è —Å–µ–≥–æ–¥–Ω—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n"
        "üß† GPT-invest ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä—è–º–æ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞.\n"
        "–¢—ã—Å—è—á–∏ –ª—é–¥–µ–π —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ.\n"
        "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_quiz")]
    ])
    await message.answer_photo(photo=photo, caption=text, reply_markup=kb)

# ---------- –ó–ê–ü–£–°–ö –ö–í–ò–ó–ê ----------
@dp.callback_query(F.data == "start_quiz")
async def start_quiz_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_data[chat_id] = {"quiz": []}

    question, options = quiz_questions[0]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=opt, callback_data=f"quiz_a_0_{i}")] for i, opt in enumerate(options)]
    )
    await callback.message.answer(question, reply_markup=kb)
    await callback.answer()

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –û–¢–í–ï–¢–û–í ----------
@dp.callback_query(F.data.startswith("quiz_a"))
async def quiz_answer_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    _, _, q_index_str, ans_index_str = callback.data.split("_")
    q_index = int(q_index_str)
    ans_index = int(ans_index_str)

    answer = quiz_questions[q_index][1][ans_index]
    user_data[chat_id]["quiz"].append(answer)

    await callback.message.answer(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{answer}</b>", parse_mode=ParseMode.HTML)

    if q_index + 1 < len(quiz_questions):
        next_q_index = q_index + 1
        question, options = quiz_questions[next_q_index]
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=opt, callback_data=f"quiz_a_{next_q_index}_{i}")] for i, opt in enumerate(options)]
        )
        await callback.message.answer(question, reply_markup=kb)
    else:
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏üëá")
        await ask_name(callback.message)

    await callback.answer()

# ---------- –§–û–†–ú–ê –ó–ê–Ø–í–ö–ò ----------
async def ask_name(message: Message):
    chat_id = message.chat.id
    user_data[chat_id]["step"] = "name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")

@dp.message(F.text & ~F.contact)
async def process_text(message: Message):
    chat_id = message.chat.id
    step = user_data.get(chat_id, {}).get("step")

    if not step:
        return

    if step == "name":
        user_data[chat_id]["name"] = message.text.strip()
        user_data[chat_id]["step"] = "surname"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")

    elif step == "surname":
        user_data[chat_id]["surname"] = message.text.strip()
        user_data[chat_id]["step"] = "phone"
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=kb)

    elif step == "phone":
        user_data[chat_id]["phone"] = message.text.strip()
        user_data[chat_id]["step"] = "email"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ email:", reply_markup=ReplyKeyboardRemove())

    elif step == "email":
        email = message.text.strip()
        if "@" in email and "." in email:
            user_data[chat_id]["email"] = email
            await send_to_api(message)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")

@dp.message(F.contact)
async def process_contact(message: Message):
    chat_id = message.chat.id
    user_data[chat_id]["phone"] = message.contact.phone_number
    user_data[chat_id]["step"] = "email"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:", reply_markup=ReplyKeyboardRemove())

# ---------- –û–¢–ü–†–ê–í–ö–ê –í API ----------
async def send_to_api(message: Message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)

    if not data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    payload = {
        "name": data["name"],
        "surname": data["surname"],
        "phone": data["phone"],
        "email": data["email"],
        "affiliate": "dmitriy",
        "country": "ru",
        "landing": "ru",
        "language": "ru",
        "ip": "0.0.0.0",
        "url": "gpt-invest-bot"
    }

    concat = "".join([payload["name"], payload["surname"], payload["email"], payload["phone"], payload["ip"]])
    token_hash = hashlib.sha256(concat.encode()).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "x-service-token": token_hash,
        "User-Agent": "GPT-investBot/1.0"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(API_URL, json=payload, headers=headers) as resp:
                text = await resp.text()
                if resp.status in [200, 201]:
                    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! ‚úîÔ∏è\n‚úâÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞!")
                else:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {resp.status}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    user_data.pop(chat_id, None)

# ---------- MAIN ----------
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
